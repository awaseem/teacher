[
  {
    "type": "outline",
    "title": "Variables!",
    "content": "Now let's get to some meat and potatoes! In this course, we're going to talk about one of the most fundamental concepts to any programming language: Variables. A variable is considered an entity that stores a value.  Think of them as a magical container that can store anything inside for later use. In JavaScript, there are two ways to create variables, and we will get into which ones to use when and their differences.",
    "buttonText": "Ouu",
    "marker": "üçØ"
  },

  {
    "type": "outline",
    "title": "Reserved keywords",
    "content": "The two ways to create variables is by using a reserved keyword: let or const. See JavaScript and most programming languages have something called reserved keywords, this means that the programmer cannot use these words outside of them being in a String (wrapped in quotes). Meaning whenever you use the word let or const, JavaScript will always interpret that as a variable being created. This is so important, essentially a programmer can understand the context of these keywords and how they are used.",
    "buttonText": "Okay",
    "marker": "üòØ"
  },

  {
    "type": "outline",
    "title": "My first variable",
    "content": "So how do you create a variable using let and how does it work? It's pretty simple, whenever you want to create a variable start by typing let. followed by the name and then what it equals. So in the following example below, you created a variable named myFirstVariable, and then assigned it a Number value of 2.",
    "code": "let myFirstVariable = 2",
    "buttonText": "Got it",
    "marker": "üëç"
  },

  {
    "type": "outline",
    "title": "Spaces?",
    "content": "You'll notice that the name of the variable has no spacing, this is because variable names cannot have any spaces. Instead, the spaces are used to dictate each action happening in that line. I know this can be confusing, but imagine it as if you're writing a sentence, you use spaces to split the words, and in this case, we use spaces to split your actions. For example: let SPACE annotates that you are creating a variable, myFirstVariable SPACE annotates that the name of the variable is been defined, equal SPACE annotates that you are assigning a value. So instead we use camelCase to dictate our intention with a variable name!",
    "code": "let myFirstVariable = 2",
    "buttonText": "Hmm",
    "marker": "ü§î"
  },

  {
    "type": "choice",
    "title": "Is this correct?",
    "content": "Is this a proper way to create a new variable in JavaScript?",
    "code": "const my number = 2",
    "answers": [
      {
        "content": "Yes",
        "correct": false,
        "explanation": "Variable names can't have any spaces in them. Remember spaces are used to annotate an action is occurring."
      },
      {
        "content": "No",
        "correct": true
      }
    ]
  },

  {
    "type": "choice",
    "title": "Is this correct?",
    "content": "Is this a proper way to create a new variable in JavaScript?",
    "code": "const const myNumber = 2",
    "answers": [
      {
        "content": "Yes",
        "correct": false,
        "explanation": "You can only use the keyword const or let once to create a new variable, using it twice will result in an error within your code!"
      },
      {
        "content": "No",
        "correct": true
      }
    ]
  },

  {
    "type": "choice",
    "title": "Is this correct?",
    "content": "Is this a proper way to create a new variable in JavaScript?",
    "code": "let myNumber = 2",
    "answers": [
      {
        "content": "Yes",
        "correct": true
      },
      {
        "content": "No",
        "correct": false,
        "explanation": "This is correct in every sense, a single keyword is used with an equal sign stating the value of the variable"
      }
    ]
  },

  {
    "type": "outline",
    "title": "What's the difference?",
    "content": "Since we can create variables in JavaScript in two different ways, you might be thinking to yourself what's the difference? See both are valid ways to create and store a value, but they do have a very important difference when it comes to reassignment...",
    "code": "let myFirstLetVariable = 2\n\nconst myFirstConstVariable = 2",
    "buttonText": "What is it...",
    "marker": "‚ùì"
  },

  {
    "type": "outline",
    "title": "Let's talk about it",
    "content": "First, we'll start with let. This keyword allows you to create a variable and allows you to reassign its value later on. For example, you can see below that we create a variable called: myFirstVariable with the initial value being 2, then later on we changed that variable's value to 4. This is called reassignment and it's possible with let.",
    "code": "let myFirstLetVariable = 2\n\nmyFirstLetVariable = 4",
    "buttonText": "Got it",
    "marker": "‚úÖ"
  },

  {
    "type": "outline",
    "title": "Constant forever",
    "content": "Const, on the other hand, will never allow reassignment. This means when you create a variable with const, it'll throw errors if you try to reassign the value to something else. For example, myFirstVariable will always have the value 2, and trying to assign it to 4 can throw errors.",
    "code": "const myFirstLetVariable = 2\n\n// not possible, will throw errors\nmyFirstLetVariable = 4",
    "buttonText": "Forever is long time...",
    "marker": "‚è∞"
  },

  {
    "type": "outline",
    "title": "Why?",
    "content": "You're probably thinking, why use const? Seems the limitations are not worth it and let can be very flexible. We use const to ensure that we are locking a value down on purpose, so no one else can come into the code and purposely or even accidentally change it later on. This can happen more than you think, so that's why we use const to ensure that variables being used aren't changed.",
    "code": "const myFirstLetVariable = 2\n\n// not possible, will throw errors\nmyFirstLetVariable = 4 // not possible, will throw errors",
    "buttonText": "Okay",
    "marker": "ü§î"
  },

  {
    "type": "choice",
    "title": "Is this valid?",
    "content": "Does the following code throw any errors?",
    "code": "let myNumber = 2\n\nmyNumber = \"I'm not a number\"",
    "answers": [
      {
        "content": "Yes",
        "correct": false,
        "explanation": "Remember a variable can store any value including a String! Even though this variable was a number, it can be changed to a string later on."
      },
      {
        "content": "No",
        "correct": true
      }
    ]
  },

  {
    "type": "choice",
    "title": "Is this valid?",
    "content": "Does the following code throw any errors?",
    "code": "const myNumber = 2\n\nmyNumber = \"I'm not a number\"",
    "answers": [
      {
        "content": "Yes",
        "correct": true
      },
      {
        "content": "No",
        "correct": false,
        "explanation": "Remember with const you cannot reassign the value of the variable onces it's created."
      }
    ]
  },

  {
    "type": "codingInputChoice",
    "title": "Your turn",
    "content": "Let's create our own variable, first we want this variable to be constant. What is the first word you should start with to create a constant variable?",
    "code": "‚ùì",
    "expectedResponse": "const"
  },

  {
    "type": "codingInputChoice",
    "title": "Your turn",
    "content": "Great! Now let's name the variable: doYouGetIt",
    "code": "const ‚ùì",
    "expectedResponse": "doYouGetIt"
  },

  {
    "type": "codingInputChoice",
    "title": "Your turn",
    "content": "Awesome! Now lets assign it to a boolean thats truthful...",
    "code": "const doYouGetIt = ‚ùì",
    "expectedResponse": "true"
  },

  {
    "type": "outline",
    "title": "What about var?",
    "content": "When researching on your own, you'll notice another way to create variables in JavaScript using the keyword: var. Before const and let were added to the programming language, we used to create variables using the keyword: var. It behaved somewhat similar to let, where reassignment was possible, but also created weird bugs which we'll get into later. For now, just do what the rest of the JavaScript community did and ignore it!",
    "buttonText": "R.I.P var",
    "marker": "‚ö∞Ô∏è"
  }
]
