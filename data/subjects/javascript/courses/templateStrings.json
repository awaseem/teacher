[
  {
    "type": "outline",
    "title": "Template Strings",
    "content": "Remember when I said there was two different ways to create Strings? Well actually there is another way... But this way is extremely powerful and provides a set features that a single or double quote can't! This way of creating Strings with this new feature is called Template Strings. \n\nNote: Template Strings is the name of the feature, when you use the feature your still creating a plain old String!",
    "buttonText": "Another way?",
    "marker": "ü§î"
  },
  {
    "type": "outline",
    "title": "The might `",
    "content": "Let's start with the basics, to create a Template String you start off with two back ticks or ` like the following. Then you fill the content like you would normally with a regular String creation.",
    "code": "const myFirstTemplateString = `hello world`",
    "buttonText": "Okay",
    "marker": "üòÉ"
  },
  {
    "type": "choice",
    "title": "Are they equal?",
    "content": "Let's see if you understand this concept. Are all the following variables Strings? ",
    "code": "const doubleQuote = \"hello world\"\n\nconst singleQuote = 'hello world'\n\nconst backtick = `hello world`",
    "answers": [
      {
        "content": "Yes",
        "correct": true
      },
      {
        "content": "No",
        "correct": false,
        "explanation": "Remember back ticks will still produce a String value, and the quotes don't matter since they create a string as well"
      }
    ]
  },
  {
    "type": "outline",
    "title": "What's the difference?",
    "content": "Remember when we use the plus sign to join two or more String together, well one of the most powerful feature about Template Strings is to join values more explicitly! ",
    "code": "const hello = 'hi'\nconst world = 'earth'\n\n// So clunky and confusing\nconst newString = hello + ' ' + world",
    "buttonText": "A better way?",
    "marker": "üëç"
  },
  {
    "type": "outline",
    "title": "Reference",
    "content": "Within a Template string, you can join values by laying out the structure of a sentence and filling in the variable values when needed. I know that's confusing, but let me explain. Inside of the back ticks, you can reference a variables value using the following syntax: ${name of variable}\n\nSo using the example before, with Template Strings it would look like the following below. When the dollar sign and braces are used, the Template String will fill in the value of the variable instead of using the word.",
    "buttonText": "${}?",
    "marker": "ü§î"
  },
  {
    "content": "So using the example before, with Template Strings it would look like the following below. When the dollar sign and braces are used, the Template String will fill in the value of the variable instead of using the word itself. So newString would have \"hi there\" instead of \"hello world\".\n\nAlso notice how we don't have to add the space in? This is because with Template Strings you can define the structure of the String and fill in the values of any variable being referenced ",
    "code": "const hello = 'hi'\nconst world = 'earth'\n\n\nconst newString = `${hello} ${world}`",
    "title": "$ { }?",
    "type": "outline",
    "buttonText": "Nice!",
    "marker": "üôè"
  },
  {
    "type": "choice",
    "title": "You try! ",
    "content": "What is the value of myNewString?",
    "code": "const greeting = \"howdy\"\nconst person = \"jim\"\n\nconst myNewString = `greeting person`",
    "answers": [
      {
        "content": "\"howdy jim\"",
        "correct": false,
        "explanation": "Look closely, since we are't using ${} inside the back ticks we aren't referencing the values of the variables"
      },
      {
        "content": "\"greeting person\"",
        "correct": true
      }
    ]
  },
  {
    "code": "const greeting = \"howdy\"\nconst person = \"jim\"\n\nconst myNewString = `${greeting} person`",
    "type": "choice",
    "title": "Let's keep going!",
    "content": "What is the value of myNewString?",
    "answers": [
      {
        "content": "\"howdy jim\"",
        "correct": false,
        "explanation": "Since we're only referencing one variable, this string is only using the value of greeting and not person!"
      },
      {
        "content": "\"greetting person\"",
        "correct": false,
        "explanation": "Since we're using the ${} syntax, we are not trying to reference the value of greeting rather than the actual word!"
      },
      {
        "correct": true,
        "content": "\"howdy person\""
      }
    ]
  },
  {
    "type": "outline",
    "title": "You can do a lot more...",
    "content": "Not only can you reference values within the ${}'s but you can also to operations inside as well. Plus any value that is the result of an operation is automatically converted to a String! \n\nThis is similar to when we tried to add a String and a Number together and how the Number got converted to a String!",
    "code": "// value of aTemplateString is \"the coolest number is 4\"\nconst aTemplateString = `the coolest number is: ${2 + 2}`",
    "buttonText": "Wow",
    "marker": "üò≤"
  },
  {
    "type": "choice",
    "title": "What is the value?",
    "content": "What is the value of myTemplateString?",
    "code": "const aTemplateString = `the coolest number is: ${4 - 2 * 2}`",
    "answers": [
      {
        "content": "\"the coolest number is: 0\"",
        "correct": true
      },
      {
        "content": "\"the coolest number is: 4\"",
        "correct": false,
        "explanation": "Look a bit more closely, all math operations in JavaScript follow BEDMAS"
      },
      {
        "content": "\"the coolest number is: 4 - 2 * 2\"",
        "correct": false,
        "explanation": "Since the math operations are within ${}, then these values are executed and their result is used in the String!"
      }
    ]
  }
]
